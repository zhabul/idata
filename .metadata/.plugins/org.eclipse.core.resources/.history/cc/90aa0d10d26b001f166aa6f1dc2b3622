package sudoko;


import java.util.Arrays;
import java.util.Collections;
import java.util.List;






public class Main   {
	   
	public static void main(String[] args)
	{

		Integer[][] tempMatrix = new Integer[][] { { 4, 0, 0, 0},   
			{ 0, 0, 2, 0},   
			{ 0, 3, 0, 0},   
			{ 1, 0, 0, 0}} ; 
            Integer[] intArray = { 1, 2, 3, 4, 5, 6, 7 };
      		List<Integer> intList = Arrays.asList(intArray);

    		Collections.shuffle(intList);

    		intList.toArray(intArray);
        int [] sudokuNr= new int[16];
		Main instance = new Main();  
		int size = tempMatrix.length;   
	   	if (instance.doIt(tempMatrix, size))  
	   	{  
	   		int x=0;
	   		for (int i=0; i<size; i++) {
	   			for (int j=0; j<size; j++) {
	   				sudokuNr[x]=tempMatrix[i][j];
	   				x++;
	   			}
	   		}
	   		drawWindow dw = new drawWindow(sudokuNr);
	   	}  else
	   	{
	   		System.out.println("We have issues");
	   	}

   } 
		


    public boolean checkIfOk(int row, int collumn, Integer[][] sudokuMatrix, int current_nr)  
    {  
   
	    for (int i = 0; i < sudokuMatrix.length; i++)  
	    {  
	 
	    	if (sudokuMatrix[row][i] == current_nr)   
			{  
			    return false;  
			}  
	    }  
      
	    for (int j = 0; j < sudokuMatrix.length; j++)  
	    {  

		    if (sudokuMatrix[j][collumn] ==current_nr)  
		    {  
		    	return false;  
		    }  
	    }  
      
		int rutenur = (int)Math.sqrt(sudokuMatrix.length);  
	    int MatrixRow = row - row % rutenur;  
	    int MatrixCollum = collumn - collumn % rutenur;  
    
	    for (int i = MatrixRow; i < MatrixRow + rutenur; i++)  
	    {  
		    for (int j = MatrixCollum; j < MatrixCollum + rutenur; j++)  
		    {  
		
		    	if (sudokuMatrix[i][j] == current_nr)  
		    	{  
		    		return false;  
		    	}  
		    }  
	    }  
       
    return true;  
    } 
    public boolean doIt(Integer[][] sudokuMatrix, int current_nr)  
    {  
	    int row=0;  
	    int collumn=0;
	    
	    int isfree = 1;  
	    for (int i = 0; i < current_nr; i++)  
	    {  
	    	for (int j = 0; j < current_nr; j++)  
	    	{  
	    			if (sudokuMatrix[i][j] == 0)  
	    			{  
	    				row = i;  
	    				collumn = j;  
	    				isfree = 0;  
	    				break;  
	    			}  
	    	}  
	      
		    if (isfree==0)   
		    {  
		    	break;  
		    }  
		}  
	    if (isfree==1)  
	    {  
	    	return true;  
	    }  

		for (int i = 1; i <= current_nr; i++)  
		{  
			if (checkIfOk(row, collumn, sudokuMatrix,i))  
			    {  
					sudokuMatrix[row][collumn] = i;  
			    	if (doIt(sudokuMatrix, current_nr))  //recusive
			    	{  
			    		return true;  
			    	}	  
			    	else  
			    	{  
			      		sudokuMatrix[row][collumn] = 0;  
			    	}  
			    }  
			}  
	    return false;  
    }  
    
}
